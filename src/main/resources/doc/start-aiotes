0- Prerequisites
  0.1 Install Docker
  0.2 Install Docker-compose
    > sudo apt install docker-compose
    
    > cd aiotes

1- Deploy AIOTES docker
  1.1 Log AIOTES private docker registry
      > sudo docker login docker-activage.satrd.es
      with user= activage password= docker.activage
WARNING! Your password will be stored unencrypted in /home/ptl01/.docker/config.json.
Configure a credential helper to remove this warning. See
https://docs.docker.com/engine/reference/commandline/login/#credentials-store

Login Succeeded

  1.2 clone repository
      > git clone https://git.activageproject.eu/Deployment/DT-AIOTES_docker
      
  1.3 configure IPSM
      > cd DT-AIOTES_docker/intermw-ipsm-deployment
      > nano .env
# INTER-MW
INTERMW_VERSION=v2.3.0
INTERMW_REST_API_PORT=8083  #here check available port 8080 by default
INTERMW_CALLBACK_PORT=8980
RABBITMQ_PORT=5672
RABBITMQ_ADMIN_PORT=15672
RABBITMQ_USER=admin
RABBITMQ_PASS=admin
PARLIAMENT_PORT=8089

# IPSM
IPSM_VERSION=0.8.8
IPSM_REST_API_PORT=8888
KAFKA_PORT=9092
ZOOKEEPER_PORT=2181
      
    get ip address of your pc
      > ip address %IP
?: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 48:4d:7e:b7:92:db brd ff:ff:ff:ff:ff:ff
    inet 132.168.161.246/22 brd 132.168.163.255 scope global dynamic eth0
       valid_lft 469312sec preferred_lft 469312sec
    
        -> here %IP= 132.168.161.246 
      > SERVER_IP="132.168.161.246"

    set ip in kafka configuration
      > nano environment/kafka_vars.env
#---------------------------------------------------------------------
# General Kafka options
#---------------------------------------------------------------------
KAFKA_ADVERTISED_HOSTNAME=132.168.161.246               #HERE set %IP
KAFKA_ADVERTISED_LISTENERS=SSL://132.168.161.246:9092   #also HERE + check KAFKA_PORT

#---------------------------------------------------------------------
# SSL configuration variables
#---------------------------------------------------------------------
KAFKA_SSL_KEYSTORE_LOCATION=/certs/kafka-server.keystore.jks
KAFKA_SSL_KEYSTORE_PASSWORD=6HVAwh#u5&zV
KAFKA_SSL_KEY_PASSWORD=6HVAwh#u5&zV
KAFKA_SSL_TRUSTSTORE_LOCATION=/certs/kafka-server.truststore.jks
KAFKA_SSL_TRUSTSTORE_PASSWORD=6HVAwh#u5&zV
KAFKA_SSL_CLIENT_AUTH=required

    give execution permissions to scripts
      > chmod +x ./*.sh
      > chmod +x ./*/*.sh
    
    create docker volumes
      > ./initialize-volumes

  1.4 Deploy the SIL
      > sudo docker-compose up -d 
    -d option to run in background
   
  1.5 Check deployment
      > sudo docker container ls
CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                                                     NAMES
5f5d712278a5        docker-activage.satrd.es/intermw:v2.3.0    "catalina.sh run"        About an hour ago   Up About an hour    0.0.0.0:8980->8980/tcp, 0.0.0.0:8083->8080/tcp                            intermw-ipsm-deployment_intermw_1
6245707b9f6d        docker-activage.satrd.es/ipsm-core:0.8.8   "java -Dconfig.resou…"   About an hour ago   Up About an hour    0.0.0.0:8888->8080/tcp                                                    intermw-ipsm-deployment_ipsm_1
f619837fbeeb        wurstmeister/kafka:1.0.0                   "start-kafka.sh"         About an hour ago   Up About an hour    0.0.0.0:9092->9092/tcp                                                    intermw-ipsm-deployment_kafka_1
2da005967ec8        daxid/parliament-triplestore               "./StartParliament.sh"   About an hour ago   Up About an hour    0.0.0.0:8089->8089/tcp                                                    intermw-ipsm-deployment_parliament_1
337590e2bfb2        rabbitmq:3.7-management-alpine             "docker-entrypoint.s…"   About an hour ago   Up About an hour    4369/tcp, 5671-5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp   intermw-ipsm-deployment_rabbitmq_1
1ddf8e91cbc4        wurstmeister/zookeeper:latest              "/bin/sh -c '/usr/sb…"   About an hour ago   Up About an hour    22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp                        intermw-ipsm-deployment_zookeeper_1

      get the CONTAINER_ID of intermw %IPSM_CONTAINER_ID
      -> here %IPSM_CONTAINER_ID= 5f5d712278a5
      > IPSM_CONTAINER_ID="5f5d712278a5"

      if other container are running it can be a previous version installed
      to remove extra containers:
        > sudo docker container kill <CONTAINER_ID>

   1.6 Start intermw container
      > sudo docker-compose restart intermw
      logs:
      > sudo docker-compose logs -f intermw

   1.7 Clean deployment (if needed)
      > sudo docker-compose down -v
      > sudo docker volume prune

   1.8 Install sensiNact bridge (with dependency and configuration)
      check sensiNact bridge configuration: check sensinact.host=$SERVER_IP
      > nano ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties
########################
#sensinact host address for example: sensinact.ddns.net:8080 (v1 japan), 193.48.18.248:8081 (IOF)
# should be $SERVER_IP
########################
sensinact.host=132.168.161.246

########################
#version of sensinact either v1 or v2
########################
sensinact.version=v2

########################
#protocol sensinact either http or https
########################
sensinact.protocol=http

########################
#sensinact websocket port, this parameter is optional case sensinact version v2
########################
sensinact.websocket.port=8092

########################
#sensinact http port
########################
sensinact.http.port=8082

########################
#Set to -1 in case wish to set to an infinite number of devices
########################
sensinact.provider.maxNumber=100

      > sudo docker cp ../../bridges/sensiNact/target/mw.bridge.sna-2.0.0-SNAPSHOT.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib
      > sudo docker cp /nobackup/m2/repository/eu/inter-iot/translators/syntactic-translators/1.0/syntactic-translators-1.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib
      > sudo docker cp ../../bridges/sensiNact/src/main/resources/intermw.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw
      > sudo docker cp ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw
      
   1.9 Restart SIL container to include bridges
      > sudo docker-compose restart intermw
      logs bridge registration:
      > sudo docker-compose logs intermw | grep -A 5 -B 1 "Registering"
intermw_1     | 13:03:29.441 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:178) - Registering bridges...
intermw_1     | 13:03:29.441 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:180) - Scanning package eu.interiot...
intermw_1     | 13:03:29.472 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:184) - Following bridges have been found: [class eu.interiot.intermw.bridge.sensinact.SensiNactBridge, class eu.interiot.intermw.bridge.test.MWTestBridge]
intermw_1     | 13:03:29.473 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:190) - Bridge eu.interiot.intermw.bridge.sensinact.SensiNactBridge for platform type http://sensinact.ddns.net/sensinact has been registered.
intermw_1     | 13:03:29.473 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:190) - Bridge eu.interiot.intermw.bridge.test.MWTestBridge for platform type http://inter-iot.eu/MWTestPlatform has been registered.
intermw_1     | 13:03:29.473 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:193) - Bridge registration has finished successfully.

