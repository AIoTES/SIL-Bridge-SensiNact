
    0- Prerequisites
      0.1 Installed Docker
      0.2 Installed Docker-compose
      0.3 Deployed AIOTES docker
          get the IPSM REST API http address and port: 
          here IPSM_IP=193.48.18.245 ; IPSM_PORT=8083
          Deploy the SIL
      0.3.1 Check AIOTES deployment
> cd aiotes/DT-AIOTES_docker/intermw-ipsm-deployment
> sudo ./initialize-volumes.sh
> sudo docker-compose up -d 
> sudo docker container ls
    CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                                                     NAMES
    5f5d712278a5        docker-activage.satrd.es/intermw:v2.3.0    "catalina.sh run"        About an hour ago   Up About an hour    0.0.0.0:8980->8980/tcp, 0.0.0.0:8083->8080/tcp                            intermw-ipsm-deployment_intermw_1
    6245707b9f6d        docker-activage.satrd.es/ipsm-core:0.8.8   "java -Dconfig.resou…"   About an hour ago   Up About an hour    0.0.0.0:8888->8080/tcp                                                    intermw-ipsm-deployment_ipsm_1
    f619837fbeeb        wurstmeister/kafka:1.0.0                   "start-kafka.sh"         About an hour ago   Up About an hour    0.0.0.0:9092->9092/tcp                                                    intermw-ipsm-deployment_kafka_1
    2da005967ec8        daxid/parliament-triplestore               "./StartParliament.sh"   About an hour ago   Up About an hour    0.0.0.0:8089->8089/tcp                                                    intermw-ipsm-deployment_parliament_1
    337590e2bfb2        rabbitmq:3.7-management-alpine             "docker-entrypoint.s…"   About an hour ago   Up About an hour    4369/tcp, 5671-5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp   intermw-ipsm-deployment_rabbitmq_1
    1ddf8e91cbc4        wurstmeister/zookeeper:latest              "/bin/sh -c '/usr/sb…"   About an hour ago   Up About an hour    22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp                        intermw-ipsm-deployment_zookeeper_1

          get the CONTAINER_ID of intermw %IPSM_CONTAINER_ID
          -> here %IPSM_CONTAINER_ID= 5f5d712278a5
> IPSM_CONTAINER_ID="5f5d712278a5"

    2 Install sensiNact bridge (with dependency and configuration)
        2.1 Pull sensiNact-SIL interoperability bridge  sources from ACTIVAGE git
> cd aiotes
> mkdir bridges
> cd bridges
> git clone https://git.activageproject.eu/Bridges/sensiNact
> cd sensiNact
> mvn clean install -DskipTests=true

        2.2 Configure sensiNact bridge
> cd aiotes/DT-AIOTES_docker/intermw-ipsm-deployment
          check sensiNact bridge configuration: check sensinact.host=localhost and sensinact.http.port=8082
            here sNaRPi_IP="10.255.1.12"
> nano ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties
    ########################
    #sensinact host address for example: sensinact.ddns.net:8080 (v1 japan), 193.48.18.248:8081 (IOF)
    # should be <sNaRPi_IP>
    ########################
    sensinact.host=localhost

    ########################
    #version of sensinact either v1 or v2
    ########################
    sensinact.version=v2

    ########################
    #protocol sensinact either http or https
    ########################
    sensinact.protocol=http

    ########################
    #sensinact websocket port, this parameter is optional case sensinact version v2
    ########################
    sensinact.websocket.port=8092

    ########################
    #sensinact http port
    ########################
    sensinact.http.port=8082

    ########################
    #Set to -1 in case wish to set to an infinite number of devices
    ########################
    sensinact.provider.maxNumber=100

> sudo docker cp ../../bridges/sensiNact/target/mw.bridge.sna-2.0.0-SNAPSHOT.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; \
sudo docker cp ~/.m2/repository/eu/inter-iot/translators/syntactic-translators/1.0/syntactic-translators-1.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; \
sudo docker cp ../../bridges/sensiNact/src/main/resources/intermw.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw; \
sudo docker cp ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw
          
          check installation is ok:
> sudo docker exec $IPSM_CONTAINER_ID ls -al /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mw.bridge.sna-2.0.0-SNAPSHOT.jar
    -rw-rw-r--    1 1000     1000         86586 Jul 23 14:54 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mw.bridge.sna-2.0.0-SNAPSHOT.jar
> sudo docker exec $IPSM_CONTAINER_ID ls -al /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/syntactic-translators-1.0.jar
    -rw-rw-r--    1 1000     1000         77893 Jul 23 14:51 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/syntactic-translators-1.0.jar
> sudo docker exec $IPSM_CONTAINER_ID ls -al /etc/inter-iot/intermw/intermw.properties
    -rw-rw-r--    1 1000     1000           902 Jul 23 14:50 /etc/inter-iot/intermw/intermw.properties
> sudo docker exec $IPSM_CONTAINER_ID ls -al /etc/inter-iot/intermw/SensiNactBridge.properties
    -rw-rw-r--    1 1000     1000           834 Jul 23 15:18 /etc/inter-iot/intermw/SensiNactBridge.properties

       2.3 Restart SIL container to include bridges
> sudo docker-compose restart intermw
          logs bridge registration:
> sudo docker-compose logs intermw | grep "sensinact.ddns.net"
intermw_1     | 14:24:30.459 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:190) - Bridge eu.interiot.intermw.bridge.sensinact.SensiNactBridge for platform type http://sensinact.ddns.net/sensinact has been registered.

    3. Run SIL with a registered local sensiNact instance
       3.0 Prerequisites
        3.0.1 start sNa-rpi-test:
> cd <sensiNact>/gateway/org.eclipse.sensinact.gateway/distribution/sensinact-distribution-template
> mvn -Ppi-test clean install
> cd <sensiNact>/gateway/org.eclipse.sensinact.gateway/distribution/sensinact-distribution-generator-1
> mvn -Pexecute-activage-pi-test clean install
 
        3.0.2 start sNa-server-panel12
> cd <sensiNact>/gateway/org.eclipse.sensinact.gateway/distribution/sensinact-distribution-template
> mvn -Pserver-panel12 clean install
> cd <sensiNact>/gateway/org.eclipse.sensinact.gateway/distribution/sensinact-distribution-generator
> mvn -Pexecute-aha-panel12 clean install
 
        3.0.3 Check sensiNact operation:
> curl -X GET --header 'Accept: application/json' 'http://localhost:8083/sensinact/providers'

       3.1 Create IPSM alignments
       3.1.1 Downstream alignment AIOTES -> sensiNact ontology
> nano ../../bridges/sensiNact/src/main/resources/alignment/aiotes2sensinact-alignment.rdf
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(AIOTES2SensiNact,0.7.5) uploaded successfully"
}
          web-browser> Response Code=    201

       3.1.2 Upstream alignment sensiNact -> AIOTES ontology
> nano ../../bridges/sensiNact/src/main/resources/alignment/sensinact2aiotes-alignment.rdf 
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(SensiNact2AIOTES,0.7.5) uploaded successfully"
}
          web-browser> Response Code=    201
          check alignments:
> curl -X GET --header 'Accept: application/json' 'http://localhost:8888/alignments'
[{"name":"AIoTES2SensiNact","sourceOntologyURI":"http://inter-iot.eu/GOIoTPex#","description":"Downstream Alignment between ACTIVAGE ontology and sensiNact AHA ontology","creator":"CEA Stephane Bergeon","targetOntologyURI":"http://sensinact.com#","version":"0.7.2","id":1,"date":1579855767901,"descId":"[AIoTES2SensiNact] [0.7.2] : http://inter-iot.eu/GOIoTPex# -> http://sensinact.com#"},{"name":"SensiNact2AIoTES","sourceOntologyURI":"http://sensinact.com#","description":"Upstream alignment between sensiNact AHA ontology and ACTIVAGE ontology.","creator":"CEA Stephane Bergeon","targetOntologyURI":"http://inter-iot.eu/GOIoTPex#","version":"0.7.2","id":2,"date":1579855784424,"descId":"[SensiNact2AIoTES] [0.7.2] : http://sensinact.com# -> http://inter-iot.eu/GOIoTPex#"}]

          web-browser> http://localhost:8888/swagger/#!/Alignments/get_alignments
          web-browser> Try it out!
          check result:
          web-browser> Response Body=
[
  {
    "name": "AIoTES2SensiNact",
    "sourceOntologyURI": "http://inter-iot.eu/GOIoTPex#",
    "description": "Downstream Alignment between ACTIVAGE ontology and sensiNact AHA ontology",
    "creator": "CEA Stephane Bergeon",
    "targetOntologyURI": "http://sensinact.com#",
    "version": "0.7.5",
    "id": 1,
    "date": 1579861818618,
    "descId": "[AIoTES2SensiNact] [0.7.5] : http://inter-iot.eu/GOIoTPex# -> http://sensinact.com#"
  },
  {
    "name": "SensiNact2AIoTES",
    "sourceOntologyURI": "http://sensinact.com#",
    "description": "Upstream alignment between sensiNact AHA ontology and ACTIVAGE ontology.",
    "creator": "CEA Stephane Bergeon",
    "targetOntologyURI": "http://inter-iot.eu/GOIoTPex#",
    "version": "0.7.5",
    "id": 2,
    "date": 1579861827552,
    "descId": "[SensiNact2AIoTES] [0.7.5] : http://sensinact.com# -> http://inter-iot.eu/GOIoTPex#"
  }
]
          web-browser> Response Code=   200

       3.2 Register client
> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{      \"clientId\": \"client\",      \"receivingCapacity\": 10,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"CLIENT_PULL\"    }"

          web-browser> http://localhost:8083/swagger/#/Clients/registerClient
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "clientId": "client",
      "receivingCapacity": 10,
      "responseFormat": "JSON_LD",
      "responseDelivery": "CLIENT_PULL"
    }
          web-browser> Execute


          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> Server reponse code= 201
          web-browser> http://localhost:8083/swagger/#/Clients/listClients
          web-browser> Client-ID= client
          web-browser> Execute
          check result:
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
    [
      {
        "clientId": "client",
        "callbackUrl": null,
        "receivingCapacity": 10,
        "responseFormat": "JSON_LD",
        "responseDelivery": "CLIENT_PULL"
      }
    ]

       3.3 Register platform
> curl -X POST "http://localhost:8083/api/mw2mw/platforms" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{      \"platformId\": \"http://local-sensinact-1\",      \"type\": \"http://sensinact.ddns.net/sensinact\",      \"baseEndpoint\": \"http://10.255.4.49:8082\",      \"location\": \"http://local-1\",      \"name\": \"local-sensinact-1\",      \"downstreamInputAlignmentName\": \"\",      \"downstreamInputAlignmentVersion\": \"\",      \"downstreamOutputAlignmentName\": \"AIoTES2SensiNact\",      \"downstreamOutputAlignmentVersion\": \"0.7.5\",      \"upstreamInputAlignmentName\": \"SensiNact2AIoTES\",      \"upstreamInputAlignmentVersion\": \"0.7.5\",      \"upstreamOutputAlignmentName\": \"\",      \"upstreamOutputAlignmentVersion\": \"\"    }"

          web-browser> http://localhost:8083/swagger/#/Platforms/registerPlatform
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "platformId": "http://local-sensinact-1",
      "type": "http://sensinact.ddns.net/sensinact",
      "baseEndpoint": "http://10.255.4.49:8082",
      "location": "http://local-1",
      "name": "local-sensinact-1",
      "downstreamInputAlignmentName": "",
      "downstreamInputAlignmentVersion": "",
      "downstreamOutputAlignmentName": "AIoTES2SensiNact",
      "downstreamOutputAlignmentVersion": "0.7.5",
      "upstreamInputAlignmentName": "SensiNact2AIoTES",
      "upstreamInputAlignmentVersion": "0.7.5",
      "upstreamOutputAlignmentName": "",
      "upstreamOutputAlignmentVersion": ""
    }
          web-browser> Execute

          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/platforms" -H  "accept: application/json" -H  "Client-ID: client"
[{"platformId":"http://local-sensinact-1","type":"http://sensinact.ddns.net/sensinact","baseEndpoint":"http://10.255.4.49:8082","location":"http://local-1","name":"local-sensinact-1","clientId":"http://inter-iot.eu/clients#client","username":"","timeCreated":1579856028275,"platformStatistics":{"deviceCount":0,"subscribedDeviceCount":0,"subscriptionCount":0},"downstreamInputAlignmentName":"","downstreamInputAlignmentVersion":"","downstreamOutputAlignmentName":"AIoTES2SensiNact","downstreamOutputAlignmentVersion":"0.7.2","upstreamInputAlignmentName":"SensiNact2AIoTES","upstreamInputAlignmentVersion":"0.7.2","upstreamOutputAlignmentName":"","upstreamOutputAlignmentVersion":""}]

          web-browser> Server reponse code= 202
          web-browser> http://localhost:8083/swagger/#/Platforms/listPlatforms
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> Execute
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
[
  {
    "platformId": "http://local-sensinact-1",
    "type": "http://sensinact.ddns.net/sensinact",
    "baseEndpoint": "http://10.255.4.49:8082",
    "location": "http://local-1",
    "name": "local-sensinact-1",
    "clientId": "http://inter-iot.eu/clients#client",
    "username": "",
    "timeCreated": 1579686961403,
    "platformStatistics": {
      "deviceCount": 0,
      "subscribedDeviceCount": 0,
      "subscriptionCount": 0
    },
    "downstreamInputAlignmentName": "",
    "downstreamInputAlignmentVersion": "",
    "downstreamOutputAlignmentName": "AIoTES2SensiNact",
    "downstreamOutputAlignmentVersion": "0.7.5",
    "upstreamInputAlignmentName": "SensiNact2AIoTES",
    "upstreamInputAlignmentVersion": "0.7.5",
    "upstreamOutputAlignmentName": "",
    "upstreamOutputAlignmentVersion": ""
  }
]

       3.4 Register devices
> curl -X POST "http://localhost:8083/api/mw2mw/devices" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{   \"devices\": [     {       \"deviceId\":\"http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state\",       \"hostedBy\": \"http://local-sensinact-1\",       \"location\": \"http://local-1\",       \"name\": \"aha-day-laying-monitor-local-state\"     }   ]}"
> curl -X POST "http://localhost:8083/api/mw2mw/devices" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{   \"devices\": [     {       \"deviceId\":\"http://sNa.de/demo/BedSensor\",       \"hostedBy\": \"http://local-sensinact-1\",       \"location\": \"http://local-1\",       \"name\": \"demo-target-bedsensor-state\"     }   ]}"
          web-browser> http://localhost:8083/swagger/#/Devices/platformCreateDevices
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
{
   "devices": [
     {
       "deviceId":
"http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state",
       "hostedBy": "http://local-sensinact-1",
       "location": "http://local-1",
       "name": "aha-day-laying-monitor-local-state"
     }
   ]
}

{
   "devices": [

     {
       "deviceId":"http://sNa.de/demo/BedSensor",
       "hostedBy": "http://local-sensinact-1",
       "location": "http://local-1",
       "name": "demo-target-bedsensor-state"
     }
   ]
}
          check device:
> curl -X GET "http://localhost:8083/api/mw2mw/devices?platformId=http%3A%2F%2Flocal-sensinact-1" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> http://localhost:8083/swagger/#/Devices/listDevices
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> platformId= http://local-sensinact-1
          web-browser> Response Code= 200
          web-browser> Response body=
[
  {
    "deviceTypes": [
      "DEVICE"
    ],
    "deviceId": "http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state",
    "hostedBy": "http://local-sensinact-1",
    "location": "http://local-1",
    "name": "aha-day-laying-monitor-local-state",
    "hosts": [],
    "forProperty": [],
    "madeActuation": null,
    "implementsProcedure": null,
    "observes": [],
    "detects": null,
    "madeObservation": null
  },
  {
    "deviceTypes": [
      "DEVICE"
    ],
    "deviceId": "http://sNa.de/demo/BedSensor",
    "hostedBy": "http://local-sensinact-1",
    "location": "http://local-1",
    "name": "demo-target-bedsensor-state",
    "hosts": [],
    "forProperty": [],
    "madeActuation": null,
    "implementsProcedure": null,
    "observes": [],
    "detects": null,
    "madeObservation": null
  }
]
       3.5 Subscribe devices
> curl -X POST "http://localhost:8083/api/mw2mw/subscriptions" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{  \"deviceIds\": [    \"http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state\"  ]}"
          web-browser> http://localhost:8083/swagger/#/Subscriptions/subscribe
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
{
  "deviceIds": [
    "http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state"
  ]
}
          web-browser> Response Code= 202

       3.6 Check communication 

       3.6.1 Message sent to intermw out of sensiNact
> sudo docker-compose logs -f intermw | grep -A 40 "Sending following observation message to intermw"

intermw_1     | 10:06:55.132 [WebSocketClient@878736416-97] INFO  eu.interiot.intermw.bridge.sensinact.SensiNactBridge$1.notify(SensiNactBridge.java:148) - Sending following observation message to intermw {
intermw_1     |   "@graph" : [ {
intermw_1     |     "@graph" : [ {
intermw_1     |       "@id" : "msg:meta/c9313150-c401-4118-a805-0b882f8e2566",
intermw_1     |       "msg:SenderPlatformId" : {
intermw_1     |         "@id" : "http://local-sensinact-1"
intermw_1     |       },
intermw_1     |       "msg:conversationID" : "conv9fb71ffa-52c2-4889-9a30-c78604321d5f",
intermw_1     |       "msg:dateTimeStamp" : "2020-01-23T10:06:55.067Z",
intermw_1     |       "msg:messageID" : "msgcf5d66d5-fe56-486a-b3b5-108ccc96e615",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "msg:Response"
intermw_1     |       }, {
intermw_1     |         "@id" : "msg:Observation"
intermw_1     |       }, {
intermw_1     |         "@id" : "msg:meta"
intermw_1     |       } ]
intermw_1     |     } ],
intermw_1     |     "@id" : "msg:metadata"
intermw_1     |   }, {
intermw_1     |     "@graph" : [ {
intermw_1     |       "@id" : "_:b0",
intermw_1     |       "http://sensinact.com#dateTimestamp" : "2020-01-23T10:06:54.818Z",
intermw_1     |       "http://sensinact.com#description" : "check if the patient is currently laying on bed whatever current time is (day and night)",
intermw_1     |       "http://sensinact.com#modifiable" : "MODIFIABLE",
intermw_1     |       "http://sensinact.com#name" : "state",
intermw_1     |       "http://sensinact.com#nickname" : "state",
intermw_1     |       "http://sensinact.com#provider" : "PTL-Day-laying-monitor",
intermw_1     |       "http://sensinact.com#service" : "monitor",
intermw_1     |       "http://sensinact.com#timestamp" : "1579774014818",
intermw_1     |       "http://sensinact.com#type" : "DAY_LAYING",
intermw_1     |       "http://sensinact.com#value" : "false",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "http://sensinact.com#Resource"
intermw_1     |       }, {
intermw_1     |         "@id" : "http://sensinact.com#BedOccupancyResource"
intermw_1     |       } ]
intermw_1     |     }, {
intermw_1     |       "@id" : "http://sensinact.com#BedOccupancyResource",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "http://www.w3.org/2000/01/rdf-schema#Resource"

       3.6.2 Message received by intermw after upstream alignment
> curl -X POST "http://localhost:8083/api/mw2mw/responses" -H  "accept: application/ld+json" -H  "Client-ID: client" | grep "iiot:hasResultValue" 

 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current

                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0      "iiot:hasResultValue" : "true",

       4 Test complete data flow
       4.1 Create push client
> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: push" -H  "Content-Type: application/json" -d "{      \"clientId\": \"push\",      \"callbackUrl\": \"http://10.255.4.49:8084/receiver\",      \"receivingCapacity\": 10,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"SERVER_PUSH\"          }"

          web-browser> http://localhost:8083/swagger/#/Clients/registerClient
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "clientId": "push",
      "callbackUrl": "http://10.255.4.49:8084/receiver",
      "receivingCapacity": 10,
      "responseFormat": "JSON_LD",
      "responseDelivery": "SERVER_PUSH"
      
    }
          web-browser> Execute

          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> Server reponse code= 201
          web-browser> http://localhost:8083/swagger/#/Clients/listClients
          web-browser> Client-ID= client
          web-browser> Execute
          check result:
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
[
  {
    "clientId": "client",
    "callbackUrl": null,
    "receivingCapacity": 10,
    "responseFormat": "JSON_LD",
    "responseDelivery": "CLIENT_PULL"
  },
  {
    "clientId": "push",
    "callbackUrl": "http://10.255.4.49:8084/receiver",
    "receivingCapacity": 10,
    "responseFormat": "JSON_LD",
    "responseDelivery": "SERVER_PUSH"
  }
]

       4.2 Subscribe device 
> curl -X POST "http://localhost:8083/api/mw2mw/subscriptions" -H  "accept: application/json" -H  "Client-ID: push" -H  "Content-Type: application/json" -d "{  \"deviceIds\": [    \"http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state\"  ]}"
          web-browser> http://localhost:8083/swagger/#/Subscriptions/subscribe
          web-browser> Try it out
          web-browser> Client-ID= push
          web-browser> body=
{
  "deviceIds": [
    "http://sensinact.ddns.net/PTL-Day-laying-monitor/monitor/state"
  ]
}
          web-browser> Response Code= 202

       4.3 Run AIOTES receiver
       4.3.1 install aiotes receiver
> cd ~/dev/aiotes/bridges
> git clone https://git.activageproject.eu/Example_Code/Forward_Client
> cd Forward_Client/sna-receiver

       4.3.2 Configure aiotes receiver
> nano config.prop
{
    "Mapping":
        [
            {
            "SourceDeviceId":	  "PTL-Day-laying-monitor",  
            "TargetDeviceId":	  "PTL-Day-laying-monitor-target", 
            "DeviceType":	  "http://purl.org/iot/vocab/m3-lite/PressureSensor",
            "SenderPlatformId":	  "http://sNa_source_platform_8",
            "ReceiverPlatformId": "http://sNa_target_platform_8",
            }
        ],
    "serverURI": "http://localhost:8083/api/mw2mw/requests",
    "clientId":	"push"
}

> nano src/main/resources/application.properties
server.port: 8084

       4.3.3 Run aiotes receiver
> mvn -Pexecute clean install

...
--- exec-maven-plugin:1.6.0:java (RUN-receiver) @ sna-receiver ---

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.2.2.RELEASE)

2020-01-27 16:04:35.490  INFO 6262 --- [lication.main()] sna.sil.client.Application               : Starting Application on ptl01-Lenovo-Flex-2-15 with PID 6262 (/home/ptl01/dev/aiotes/bridges/Forward_Client/sna-receiver/target/classes started by ptl01 in /home/ptl01/dev/aiotes/bridges/Forward_Client/sna-receiver)
2020-01-27 16:04:35.492  INFO 6262 --- [lication.main()] sna.sil.client.Application               : No active profile set, falling back to default profiles: default
2020-01-27 16:04:40.269  INFO 6262 --- [lication.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8084 (http)
2020-01-27 16:04:40.538  INFO 6262 --- [lication.main()] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-27 16:04:40.538  INFO 6262 --- [lication.main()] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-27 16:04:40.898  INFO 6262 --- [lication.main()] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-27 16:04:40.899  INFO 6262 --- [lication.main()] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4378 ms
2020-01-27 16:04:41.287  INFO 6262 --- [lication.main()] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-27 16:04:42.617  INFO 6262 --- [lication.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8084 (http) with context path ''
2020-01-27 16:04:42.620  INFO 6262 --- [lication.main()] sna.sil.client.Application               : Started Application in 13.137 seconds (JVM running for 48.493)



        5 Test bed sensor data flow sensiNact -> AIOTES -> sensiNact
        5.1 click virtual bed sensor button 
        5.2 check in sensiNact API that newBedSensor is updated
> curl -X GET --header 'Accept: application/json' 'http://localhost:8082/sensinact/providers/newBedSensor/services/monitor/resources/state/GET'
{"response":{"name":"state","type":"boolean","value":false,"timestamp":1579867115077},"type":"GET_RESPONSE","uri":"/newBedSensor/monitor/state","statusCode":200}


> cd dev/aiotes/DT-AIOTES_docker/intermw-ipsm-deployment

> sudo docker-compose down -v

> sudo docker volume prune

> RPI_IP_ADDRESS="10.255.1.12"

> ip address | grep eth0

> IP_ADDRESS="10.255.3.19"
> echo $IP_ADDRESS

> sudo nano environment/kafka_vars.env

> sudo ./initialize-volumes.sh

> sudo docker-compose up -d

> sudo docker container ls

> IPSM_CONTAINER_ID=""
> echo $IPSM_CONTAINER_ID

wait 45s

> sudo docker cp ~/.m2/repository/eu/inter-iot/translators/syntactic-translators/1.0/syntactic-translators-1.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; sudo docker cp ../../bridges/sensiNact/src/main/resources/intermw.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw

> sudo docker cp ../../bridges/sensiNact/target/mw.bridge.sna-2.0.0-SNAPSHOT.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib ; sudo docker cp ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw

> sudo docker cp ../../bridges/universAAL/target/mw.bridge.uaal-2.3.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; sudo docker cp ../../bridges/universAAL/src/main/resources/UAALBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw

> sudo docker-compose restart intermw

wait 1mn

> sudo docker-compose logs intermw | grep "http://sensinact.ddns.net/sensinact"

> sudo docker-compose logs intermw | grep "http://inter-iot.eu/UniversAAL"

upload alignments through
> http://localhost:8888/swagger/#!/Alignments/post_alignments

#clients

> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: pullclient_uAAL_source" -H  "Content-Type: application/json" -d "{      \"clientId\": \"pullclient_uAAL_source\",      \"receivingCapacity\": 1,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"CLIENT_PULL\"    }"

> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: pullclient_sNa_target" -H  "Content-Type: application/json" -d "{      \"clientId\": \"pullclient_sNa_target\",      \"receivingCapacity\": 1,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"CLIENT_PULL\"    }"

> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: forwardclient" -H  "Content-Type: application/json" -d "{      \"clientId\": \"forwardclient\",  \"callbackUrl\":\"http://$IP_ADDRESS:8084/receiver\",        \"receivingCapacity\": 1,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"SERVER_PUSH\"    }"


source

#platforms

> curl -X POST "http://localhost:8083/api/mw2mw/platforms" -H  "accept: application/json" -H  "Client-ID: pullclient_uAAL_source" -H  "Content-Type: application/json" -d "{      \"platformId\": \"http://uAAL_source_platform_1\",      \"type\": \"http://inter-iot.eu/UniversAAL\",      \"baseEndpoint\": \"http://10.255.1.12:9002/uaal\",      \"location\": \"http://testbed.activage-isere.eu/PTL\",      \"name\": \"uAAL_source_platform\",       \"downstreamOutputAlignmentName\": \"\",      \"downstreamOutputAlignmentVersion\": \"\",      \"downstreamInputAlignmentName\": \"AIOTES-universAAL-Alignment\",      \"downstreamInputAlignmentVersion\": \"2.1\",      \"upstreamInputAlignmentName\": \"universAAL-AIOTES-Alignment\",      \"upstreamInputAlignmentVersion\": \"2.0\",      \"upstreamOutputAlignmentName\": \"\",      \"upstreamOutputAlignmentVersion\": \"\"}"

> curl -X GET --header 'Accept: application/json' 'http://10.255.1.12:9002/uaal/spaces'

#devices

> curl -X POST "http://localhost:8083/api/mw2mw/devices" -H  "accept: application/json" -H  "Client-ID:pullclient_uAAL_source" -H  "Content-Type: application/json" -d "{   \"devices\": [     {       \"deviceId\":\"http://testbed.activage-isere.eu/PTL#wiboBS1\",       \"hostedBy\": \"http://uAAL_source_platform_1\",  \"location\":\"http://testbed.activage-isere/PTL\",       \"name\": \"BedSensor_uAAL_source\"     }   ]}"


#subscriptions

> curl -X POST "http://localhost:8083/api/mw2mw/subscriptions" -H  "accept: application/json" -H  "Client-ID: forwardclient" -H  "Content-Type: application/json" -d "{  \"deviceIds\": [    \"http://testbed.activage-isere.eu/PTL#wiboBS1\"  ]}"


target

#platforms

> curl -X POST "http://localhost:8083/api/mw2mw/platforms" -H  "accept: application/json" -H  "Client-ID: pullclient_sNa_target" -H  "Content-Type: application/json" -d "{      \"platformId\": \"http://sNa_target_platform_1\",      \"type\": \"http://sensinact.ddns.net/sensinact\",      \"baseEndpoint\": \"http://$IP_ADDRESS:8082\",      \"location\": \"http://testbed.activage-isere.eu/PTL\",      \"name\": \"sNa_target_platform\",      \"downstreamInputAlignmentName\": \"\",      \"downstreamInputAlignmentVersion\": \"\",      \"downstreamOutputAlignmentName\": \"AIoTES2SensiNact\",      \"downstreamOutputAlignmentVersion\": \"0.7.6\",      \"upstreamOutputAlignmentName\": \"SensiNact2AIoTES\",      \"upstreamOutputAlignmentVersion\": \"0.7.6\",      \"upstreamInputAlignmentName\": \"\",      \"upstreamInputAlignmentVersion\": \"\"    }"

#devices

> curl -X POST "http://localhost:8083/api/mw2mw/devices" -H  "accept: application/json" -H  "Client-ID:pullclient_sNa_target" -H  "Content-Type: application/json" -d "{   \"devices\": [     {       \"deviceId\":\"http://sensinact.ddns.net/PTL-Day-laying-target/monitor/state\",       \"hostedBy\": \"http://sNa_target_platform_1\",  \"location\":\"http://testbed.activage-isere/PTL\",       \"name\": \"BedSensor_sNa_target\"     }   ]}"

Test data flow sensiNact source -> SIL -> sensiNact target

switch WOQ bed sensor

check bed sensor function state in uAAL source platform
> ssh pi@10.255.1.12
> tail -f /home/pi/uLive/data/log/Fh-IGD_SLBT.log | grep BedSensor
>>>>>>>>>>>>>>>>> BedSensor::wiboBS1@BedRoom->occupied = true
>>>>>>>>>>>>>>>>> BedSensor::wiboBS1@BedRoom->occupied = false



check bed sensor function state in sensiNact target platform
> curl -X GET --header 'Accept: application/json' 'http://localhost:8082/sensinact/providers/PTL-Day-laying-target/services/monitor/resources/state/GET'
{"type":"GET_RESPONSE","uri":"/PTL-Day-laying-target/monitor/state","errors":[{"trace":"","message":"Not found"}],"statusCode":404}
not as expected:
{
  "response": {
    "name": "state",
    "type": "boolean",
    "value": false,
    "timestamp": 1582025428006
  },
  "type": "GET_RESPONSE",
  "uri": "/PTL-Day-laying-target/monitor/state",
  "statusCode": 200
}


