
    0- Prerequisites
      0.1 Installed Docker
      0.2 Installed Docker-compose
      0.3 Deployed AIOTES docker
          get the IPSM REST API http address and port: 
          here IPSM_IP=193.48.18.245 ; IPSM_PORT=8083
      0.3.1 Check AIOTES deployment
> cd aiotes/DT-AIOTES_docker/intermw-ipsm-deployment
> sudo ./initialize-volumes.sh
> sudo docker-compose up -d 
> sudo docker container ls
    CONTAINER ID        IMAGE                                      COMMAND                  CREATED             STATUS              PORTS                                                                     NAMES
    5f5d712278a5        docker-activage.satrd.es/intermw:v2.3.0    "catalina.sh run"        About an hour ago   Up About an hour    0.0.0.0:8980->8980/tcp, 0.0.0.0:8083->8080/tcp                            intermw-ipsm-deployment_intermw_1
    6245707b9f6d        docker-activage.satrd.es/ipsm-core:0.8.8   "java -Dconfig.resou…"   About an hour ago   Up About an hour    0.0.0.0:8888->8080/tcp                                                    intermw-ipsm-deployment_ipsm_1
    f619837fbeeb        wurstmeister/kafka:1.0.0                   "start-kafka.sh"         About an hour ago   Up About an hour    0.0.0.0:9092->9092/tcp                                                    intermw-ipsm-deployment_kafka_1
    2da005967ec8        daxid/parliament-triplestore               "./StartParliament.sh"   About an hour ago   Up About an hour    0.0.0.0:8089->8089/tcp                                                    intermw-ipsm-deployment_parliament_1
    337590e2bfb2        rabbitmq:3.7-management-alpine             "docker-entrypoint.s…"   About an hour ago   Up About an hour    4369/tcp, 5671-5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp   intermw-ipsm-deployment_rabbitmq_1
    1ddf8e91cbc4        wurstmeister/zookeeper:latest              "/bin/sh -c '/usr/sb…"   About an hour ago   Up About an hour    22/tcp, 2888/tcp, 3888/tcp, 0.0.0.0:2181->2181/tcp                        intermw-ipsm-deployment_zookeeper_1

          get the CONTAINER_ID of intermw %IPSM_CONTAINER_ID
          -> here %IPSM_CONTAINER_ID= 5f5d712278a5
> IPSM_CONTAINER_ID="5f5d712278a5"

    1 Install sNaRPI
        1.1 Get sNaRPI IP address
          with MAC = b8:27:eb:d2:ea:ae
        1.2 Check sNaRPI connectivity
          > ping <sNaRPI_IP>
        1.3 Check sensiNact REST API
          > web-browser> http://<sNaRPI_IP>:8081/swagger-api
          > web-browser> http://<sNaRPI_IP>:8081/sensinact/providers/aha-night-rising-monitor-bedroom-WOQ/services/monitor/resources/state/GET
{"response":{"name":"state","type":"boolean","value":false,"timestamp":1564751701101},"type":"GET_RESPONSE","uri":"/aha-night-rising-monitor-bedroom-WOQ/monitor/state","statusCode":200}

    2 Install sensiNact bridge (with dependency and configuration)
        2.1 Pull sensiNact-SIL interoperability bridge  sources from ACTIVAGE git
          > cd aiotes
          > mkdir bridges
          > cd bridges
          > git clone https://git.activageproject.eu/Bridges/sensiNact
          > cd sensiNact
          > mvn clean install -DskipTests=true

        2.2 Configure sensiNact bridge
          > cd aiotes/DT-AIOTES_docker/intermw-ipsm-deployment
          check sensiNact bridge configuration: check sensinact.host=$sNaRPi_IP and sensinact.http.port=8081
            here sNaRPi_IP="10.255.1.12"
          > nano ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties
    ########################
    #sensinact host address for example: sensinact.ddns.net:8080 (v1 japan), 193.48.18.248:8081 (IOF)
    # should be <sNaRPi_IP>
    ########################
    sensinact.host=10.255.1.12

    ########################
    #version of sensinact either v1 or v2
    ########################
    sensinact.version=v2

    ########################
    #protocol sensinact either http or https
    ########################
    sensinact.protocol=http

    ########################
    #sensinact websocket port, this parameter is optional case sensinact version v2
    ########################
    sensinact.websocket.port=8092

    ########################
    #sensinact http port
    ########################
    sensinact.http.port=8081

    ########################
    #Set to -1 in case wish to set to an infinite number of devices
    ########################
    sensinact.provider.maxNumber=100


> sudo docker cp ../../bridges/sensiNact/target/mw.bridge.sna-2.0.0-SNAPSHOT.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; \
sudo docker cp ~/.m2/repository/eu/inter-iot/translators/syntactic-translators/1.0/syntactic-translators-1.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; \
sudo docker cp ../../bridges/sensiNact/src/main/resources/intermw.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw; \
sudo docker cp ../../bridges/sensiNact/src/main/resources/SensiNactBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw
          
          check installation is ok:
> sudo docker exec $IPSM_CONTAINER_ID ls -al /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mw.bridge.sna-2.0.0-SNAPSHOT.jar
    -rw-rw-r--    1 1000     1000         86586 Jul 23 14:54 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/mw.bridge.sna-2.0.0-SNAPSHOT.jar
> sudo docker exec $IPSM_CONTAINER_ID ls -al /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/syntactic-translators-1.0.jar
    -rw-rw-r--    1 1000     1000         77893 Jul 23 14:51 /usr/local/tomcat/webapps/ROOT/WEB-INF/lib/syntactic-translators-1.0.jar
> sudo docker exec $IPSM_CONTAINER_ID ls -al /etc/inter-iot/intermw/intermw.properties
    -rw-rw-r--    1 1000     1000           902 Jul 23 14:50 /etc/inter-iot/intermw/intermw.properties
> sudo docker exec $IPSM_CONTAINER_ID ls -al /etc/inter-iot/intermw/SensiNactBridge.properties
    -rw-rw-r--    1 1000     1000           834 Jul 23 15:18 /etc/inter-iot/intermw/SensiNactBridge.properties

    3 Install universAAL bridge (with dependency and configuration)
        2.1 Pull universAAL-SIL interoperability bridge  sources from ACTIVAGE git
          > cd aiotes
          > mkdir bridges
          > cd bridges
          > git clone https://git.activageproject.eu/Bridges/universAAL
          > cd universAAL
          > mvn clean install -DskipTests=true

        2.2 Configure universAAL bridge
          > cd aiotes/DT-AIOTES_docker/intermw-ipsm-deployment
          check universAAL bridge configuration: c
> nano ../../bridges/sensiNact/src/main/resources/UAALBridge.properties

# UniversAAL
universaal-url=http://localhost:9000/uaal/
universaal-user=interiot
universaal-password=interiot
universaal-space=interiot

> sudo docker cp ../../bridges/universAAL/target/mw.bridge.uaal-2.3.0.jar $IPSM_CONTAINER_ID:/usr/local/tomcat/webapps/ROOT/WEB-INF/lib; \
sudo docker cp ../../bridges/universAAL/src/main/resources/UAALBridge.properties $IPSM_CONTAINER_ID:/etc/inter-iot/intermw
          
       2.3 Restart SIL container to include bridges
> sudo docker-compose restart intermw
          logs bridge registration:
> sudo docker-compose logs intermw | grep "sensinact.ddns.net"
intermw_1     | 14:24:30.459 [localhost-startStop-1] DEBUG eu.interiot.intermw.bridge.BridgeContext.registerBridges(BridgeContext.java:190) - Bridge eu.interiot.intermw.bridge.sensinact.SensiNactBridge for platform type http://sensinact.ddns.net/sensinact has been registered.
> sudo docker-compose logs intermw | grep "UniversAAL"

    3. Run SIL

       3.1 Create IPSM alignments

       3.1.1 alignments AIOTES <-> universAAL ontology
> nano ../../alignments/DS_WOZ_UNIVERSAAL/AIOTES.rdf
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(AIOTES-universAAL-Alignment,2.1) uploaded successfully"
}
          web-browser> Response Code= 201

> nano ../../alignments/DS_WOZ_UNIVERSAAL/universAAL.rdf
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(universAAL-AIOTES-Alignment,2.0) uploaded successfully"
}
          web-browser> Response Code= 201

       3.1.2 alignments sensiNact >-> AIOTES ontology
> nano ../../bridges/sensiNact/src/main/resources/alignment/sensinact2aiotes-alignment.rdf 
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(SensiNact2AIoTES,0.7.5) uploaded successfully"
}
          web-browser> Response Code= 201

> nano ../../bridges/sensiNact/src/main/resources/alignment/aiotes2sensinact-alignment.rdf 
          web-browser> http://localhost:8888/swagger/#!/Alignments/post_alignments
          web-browser> aligment= <content>
          web-browser> Try it out!
          
          check result:
          web-browser> Response Body=
{
  "message": "Alignment with AlignmentID(AIoTES2SensiNact,0.7.5) uploaded successfully"
}
          web-browser> Response Code= 201

          check alignments:
> curl -X GET --header 'Accept: application/json' 'http://localhost:8888/alignments'
[{"name":"AIoTES2SensiNact","sourceOntologyURI":"http://inter-iot.eu/GOIoTPex#","description":"Downstream Alignment between ACTIVAGE ontology and sensiNact AHA ontology","creator":"CEA Stephane Bergeon","targetOntologyURI":"http://sensinact.com#","version":"0.7.2","id":1,"date":1579855767901,"descId":"[AIoTES2SensiNact] [0.7.2] : http://inter-iot.eu/GOIoTPex# -> http://sensinact.com#"},{"name":"SensiNact2AIoTES","sourceOntologyURI":"http://sensinact.com#","description":"Upstream alignment between sensiNact AHA ontology and ACTIVAGE ontology.","creator":"CEA Stephane Bergeon","targetOntologyURI":"http://inter-iot.eu/GOIoTPex#","version":"0.7.2","id":2,"date":1579855784424,"descId":"[SensiNact2AIoTES] [0.7.2] : http://sensinact.com# -> http://inter-iot.eu/GOIoTPex#"}]

          web-browser> http://localhost:8888/swagger/#!/Alignments/get_alignments
          web-browser> Try it out!
          check result:
          web-browser> Response Body=
[
  {
    "name": "AIOTES-universAAL-Alignment",
    ...
    
  },
...
  {
    "name": "SensiNact2AIoTES",
    ...
  }
...
]
          web-browser> Response Code=200

       3.2 Register client
> curl -X POST "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client" -H  "Content-Type: application/json" -d "{      \"clientId\": \"client\",      \"receivingCapacity\": 10,      \"responseFormat\": \"JSON_LD\",      \"responseDelivery\": \"CLIENT_PULL\"    }"

          web-browser> http://localhost:8083/swagger/#/Clients/registerClient
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "clientId": "client",
      "receivingCapacity": 10,
      "responseFormat": "JSON_LD",
      "responseDelivery": "CLIENT_PULL"
    }
          web-browser> Execute


          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> Server reponse code= 201
          web-browser> http://localhost:8083/swagger/#/Clients/listClients
          web-browser> Client-ID= client
          web-browser> Execute
          check result:
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
    [
      {
        "clientId": "client",
        "callbackUrl": null,
        "receivingCapacity": 10,
        "responseFormat": "JSON_LD",
        "responseDelivery": "CLIENT_PULL"
      }
    ]

       3.3 Register sensiNact and universAAL platforms
          web-browser> http://localhost:8083/swagger/#/Platforms/registerPlatform
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "platformId": "http://rpi-sensinact-1",
      "type": "http://sensinact.ddns.net/sensinact",
      "baseEndpoint": "http://10.255.1.12:8082",
      "location": "http://rpi-1",
      "name": "rpi-sensinact-1",
      "downstreamInputAlignmentName": "",
      "downstreamInputAlignmentVersion": "",
      "downstreamOutputAlignmentName": "AIoTES2SensiNact",
      "downstreamOutputAlignmentVersion": "0.7.5",
      "upstreamInputAlignmentName": "SensiNact2AIoTES",
      "upstreamInputAlignmentVersion": "0.7.5",
      "upstreamOutputAlignmentName": "",
      "upstreamOutputAlignmentVersion": ""
    }
          web-browser> Execute

          web-browser> http://localhost:8083/swagger/#/Platforms/registerPlatform
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "platformId": "http://RPI-uLive-1",
      "type": "http://inter-iot.eu/UniversAAL",
      "baseEndpoint": "http://10.255.1.12:9000",
      "location": "http://RPI-uLive-1",
      "name": "RPI-uLive-1",
      "downstreamInputAlignmentName": "",
      "downstreamInputAlignmentVersion": "",
      "downstreamOutputAlignmentName": "AIOTES-universAAL-Alignment",
      "downstreamOutputAlignmentVersion": "2.1",
      "upstreamInputAlignmentName": "universAAL-AIOTES-Alignment",
      "upstreamInputAlignmentVersion": "2.0",
      "upstreamOutputAlignmentName": "",
      "upstreamOutputAlignmentVersion": ""
    }
          web-browser> Execute

          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/platforms" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> Server reponse code= 202
          web-browser> http://localhost:8083/swagger/#/Platforms/listPlatforms
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> Execute
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
[
  {
    "platformId": "http://rpi-sensinact-1",
    "type": "http://sensinact.ddns.net/sensinact",
...
  },
  {
    "platformId": "http://local-universaal-1",
    "type": "http://inter-iot.eu/UniversAAL",
...
  }
]

       3.4 Register devices
          web-browser> http://localhost:8083/swagger/#/Devices/platformCreateDevices
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
{
   "devices": [
     {
       "deviceId": "http://sensinact.ddns.net/aha-night-rising-monitor-bedroom-WOQ/monitor/state",
       "hostedBy": "http://rpi-sensinact-1",
       "location": "http://rpi-1",
       "name": "aha-night-rising-monitor-bedroom-WOQ-state"
     }
   ]
}

{
   "devices": [

     {
       "deviceId":"http://sNa.de/demo/BedSensor",
       "hostedBy": "http://local-universaal-1",
       "location": "http://local-1",
       "name": "demo-target-bedsensor-state"
     }
   ]
}
          check device:
> curl -X GET "http://localhost:8083/api/mw2mw/devices?platformId=http%3A%2F%2Flocal-sensinact-1" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> http://localhost:8083/swagger/#/Devices/listDevices
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> platformId= http://local-sensinact-1
          web-browser> Response Code= 200
          web-browser> Response body=
[
  {
    "deviceTypes": [
      "DEVICE"
    ],
    "deviceId": "http://sensinact.ddns.net/aha-night-rising-monitor-bedroom-WOQ/monitor/state",
    "hostedBy": "http://rpi-sensinact-1",
    "location": "http://rpi-1",
    "name": "aha-night-rising-monitor-bedroom-WOQ-state"
    "hosts": [],
    "forProperty": [],
    "madeActuation": null,
    "implementsProcedure": null,
    "observes": [],
    "detects": null,
    "madeObservation": null
  },
  {
    "deviceTypes": [
      "DEVICE"
    ],
    "deviceId": "http://sNa.de/demo/BedSensor",
    "hostedBy": "http://local-universaal-1",
    "location": "http://local-1",
    "name": "demo-target-bedsensor-state",
    "hosts": [],
    "forProperty": [],
    "madeActuation": null,
    "implementsProcedure": null,
    "observes": [],
    "detects": null,
    "madeObservation": null
  }
]
       3.5 Subscribe devices
          web-browser> http://localhost:8083/swagger/#/Subscriptions/subscribe
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
{
  "deviceIds": [
    "http://sensinact.ddns.net/aha-night-rising-monitor-bedroom-WOQ/monitor/state"
  ]
}
          web-browser> Response Code= 202

       3.6 Check communication 

       3.6.1 Message sent to intermw out of sensiNact
> sudo docker-compose logs -f intermw | grep -A 40 "Sending following observation message to intermw"

intermw_1     | 10:06:55.132 [WebSocketClient@878736416-97] INFO  eu.interiot.intermw.bridge.sensinact.SensiNactBridge$1.notify(SensiNactBridge.java:148) - Sending following observation message to intermw {
intermw_1     |   "@graph" : [ {
intermw_1     |     "@graph" : [ {
intermw_1     |       "@id" : "msg:meta/c9313150-c401-4118-a805-0b882f8e2566",
intermw_1     |       "msg:SenderPlatformId" : {
intermw_1     |         "@id" : "http://rpi-sensinact-1"
intermw_1     |       },
intermw_1     |       "msg:conversationID" : "conv9fb71ffa-52c2-4889-9a30-c78604321d5f",
intermw_1     |       "msg:dateTimeStamp" : "2020-01-23T10:06:55.067Z",
intermw_1     |       "msg:messageID" : "msgcf5d66d5-fe56-486a-b3b5-108ccc96e615",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "msg:Response"
intermw_1     |       }, {
intermw_1     |         "@id" : "msg:Observation"
intermw_1     |       }, {
intermw_1     |         "@id" : "msg:meta"
intermw_1     |       } ]
intermw_1     |     } ],
intermw_1     |     "@id" : "msg:metadata"
intermw_1     |   }, {
intermw_1     |     "@graph" : [ {
intermw_1     |       "@id" : "_:b0",
intermw_1     |       "http://sensinact.com#dateTimestamp" : "2020-01-23T10:06:54.818Z",
intermw_1     |       "http://sensinact.com#description" : "check if the patient is currently laying on bed whatever current time is (day and night)",
intermw_1     |       "http://sensinact.com#modifiable" : "MODIFIABLE",
intermw_1     |       "http://sensinact.com#name" : "state",
intermw_1     |       "http://sensinact.com#nickname" : "state",
intermw_1     |       "http://sensinact.com#provider" : "aha-night-rising-monitor-bedroom-WOQ",
intermw_1     |       "http://sensinact.com#service" : "monitor",
intermw_1     |       "http://sensinact.com#timestamp" : "1579774014818",
intermw_1     |       "http://sensinact.com#type" : "NIGHT_RISING",
intermw_1     |       "http://sensinact.com#value" : "false",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "http://sensinact.com#Resource"
intermw_1     |       }, {
intermw_1     |         "@id" : "http://sensinact.com#BedOccupancyResource"
intermw_1     |       } ]
intermw_1     |     }, {
intermw_1     |       "@id" : "http://sensinact.com#BedOccupancyResource",
intermw_1     |       "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" : [ {
intermw_1     |         "@id" : "http://www.w3.org/2000/01/rdf-schema#Resource"

       3.6.2 Message received by intermw after upstream alignment
> curl -X POST "http://localhost:8083/api/mw2mw/responses" -H  "accept: application/ld+json" -H  "Client-ID: client" | grep "iiot:hasResultValue" 

 % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current

                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0      "iiot:hasResultValue" : "true",

       4 Test complete data flow
       4.1 Create push client
          web-browser> http://localhost:8083/swagger/#/Clients/registerClient
          web-browser> Try it out
          web-browser> Client-ID= client
          web-browser> body=
    {
      "clientId": "push",
      "callbackUrl": "http://<universAAL.receiver.url>/receiver",
      "receivingCapacity": 10,
      "responseFormat": "JSON_LD",
      "responseDelivery": "SERVER_PUSH"
      
    }
          web-browser> Execute

          check result:
> curl -X GET "http://localhost:8083/api/mw2mw/clients" -H  "accept: application/json" -H  "Client-ID: client"

          web-browser> Server reponse code= 201
          web-browser> http://localhost:8083/swagger/#/Clients/listClients
          web-browser> Client-ID= client
          web-browser> Execute
          check result:
          web-browser> Server reponse code= 200
          web-browser> Server reponse Details=
[
  {
    "clientId": "client",
    "callbackUrl": null,
    "receivingCapacity": 10,
    "responseFormat": "JSON_LD",
    "responseDelivery": "CLIENT_PULL"
  },
  {
    "clientId": "push",
    "callbackUrl": "http://<universAAL.receiver.url>/receiver",
    "receivingCapacity": 10,
    "responseFormat": "JSON_LD",
    "responseDelivery": "SERVER_PUSH"
  }
]

       4.2 Subscribe device 
          web-browser> http://localhost:8083/swagger/#/Subscriptions/subscribe
          web-browser> Try it out
          web-browser> Client-ID= push
          web-browser> body=
{
  "deviceIds": [
    "http://sensinact.ddns.net/aha-night-rising-monitor-bedroom-WOQ/monitor/state"
  ]
}
          web-browser> Response Code= 202

       4.2 Run AIOTES receiver
       4.2.1 install aiotes receiver
> cd ~/dev/aiotes/bridges
> git clone https://git.activageproject.eu/Example_Code/Forward_Client
> cd Forward_Client/receiver

       4.2.2 Configure aiotes receiver
> nano config.prop
{
    "Mapping":
        [
            {
            "SourceDeviceId":	  "http://sensinact.ddns.net/aha-night-rising-monitor-bedroom-WOQ/monitor/state",  
            "TargetDeviceId":	  "htpp://sNa.de/demo/BedSensor", 
            "DeviceType":	  "http://purl.org/iot/vocab/m3-lite/PressureSensor",
            "SenderPlatformId":	  "http://rpi-sensinact-1",
            "ReceiverPlatformId": "http://local-universaal-1",
            }
        ],
    "serverURI": "http://localhost:8083/api/mw2mw/requests",
    "clientId":	"push"
}

       4.2.3 Run aiotes receiver
> mvn -Pexecute clean install
...
--- exec-maven-plugin:1.6.0:java (RUN-receiver) @ receiver ---

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.2.2.RELEASE)

2020-01-23 12:28:40.792  INFO 24783 --- [lication.main()] uAAL.SIL.client.Application              : Starting Application on ptl01-Lenovo-Flex-2-15 with PID 24783 (/home/ptl01/dev/aiotes/bridges/Forward_Client/receiver/target/classes started by ptl01 in /home/ptl01/dev/aiotes/bridges/Forward_Client/receiver)
2020-01-23 12:28:40.799  INFO 24783 --- [lication.main()] uAAL.SIL.client.Application              : No active profile set, falling back to default profiles: default
2020-01-23 12:28:42.166  INFO 24783 --- [lication.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 1122 (http)
2020-01-23 12:28:42.201  INFO 24783 --- [lication.main()] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-01-23 12:28:42.202  INFO 24783 --- [lication.main()] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-01-23 12:28:42.319  INFO 24783 --- [lication.main()] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-01-23 12:28:42.320  INFO 24783 --- [lication.main()] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1418 ms
2020-01-23 12:28:42.566  INFO 24783 --- [lication.main()] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-01-23 12:28:42.846  INFO 24783 --- [lication.main()] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 1122 (http) with context path ''
2020-01-23 12:28:42.849  INFO 24783 --- [lication.main()] uAAL.SIL.client.Application              : Started Application in 3.199 seconds (JVM running for 12.954)


        5 Test bed sensor data flow sensiNact -> AIOTES -> universAAL
        5.1 stimulate the bed sensor 
        5.2 check in universAAL API that htpp://sNa.de/demo/BedSensor is updated
